name: Starknet Foundry Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Run Starknet Foundry Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install asdf plugins
        run: |
          asdf plugin add scarb || echo "scarb plugin already installed"
          asdf plugin add starknet-foundry || echo "starknet-foundry plugin already installed"

      - name: Install Scarb and Starknet Foundry
        run: |
          asdf install scarb latest
          asdf install starknet-foundry latest
          asdf local scarb latest
          asdf local starknet-foundry latest

      - name: Verify installations
        run: |
          scarb --version
          snforge --version

      - name: Run Starknet Foundry tests with detailed output
        id: test_run
        run: |
          # Run tests and capture all output
          snforge test > test_output.txt 2>&1 || true
          
          # Store the full output for debugging
          cat test_output.txt > full_test_output.txt
          
          # Create an empty JSON file with the array structure
          echo '{"summary":{"total":0,"passed":0,"failed":0},"tests":[]}' > test_results.json
          
          # Extract test results and save them to a temporary file
          awk '
          BEGIN { total=0; passed=0; failed=0; current_test=""; }
          
          /\[(PASS|FAIL)\]/ {
            # Extract test name and status
            for(i=1; i<=NF; i++) {
              if($i ~ /^\[(PASS|FAIL)\]$/) {
                status = substr($i, 2, length($i)-2);
                # Extract the test name (everything after the status until end of line)
                test_name = "";
                for(j=i+1; j<=NF; j++) {
                  if(j > i+1) test_name = test_name " ";
                  test_name = test_name $j;
                }
                gsub(/\(.*\)$/, "", test_name); # Remove gas info if present
                
                # Increment counters
                total++;
                if(status == "PASS") passed++;
                if(status == "FAIL") failed++;
                
                # Save current test for possible failure reason
                current_test = test_name;
                
                # Write test entry
                print "{\"name\":\"" current_test "\",\"success\":" (status == "PASS" ? "true" : "false") ",\"reason\":" (status == "PASS" ? "null" : "\"\"") "}," > "test_entries.txt";
                
                # If status is PASS, there will be no failure data
                if(status == "PASS") current_test = "";
                
                break;
              }
            }
          }
          
          # Look for failure data
          /Failure data:/ {
            if(current_test != "") {
              # Extract the failure reason
              reason = substr($0, index($0, "Failure data:") + 13);
              gsub(/\"/, "\\\"", reason); # Escape quotes
              
              # Update the last test entry with the reason
              system("sed -i \"$ s/,\\\"reason\\\":\\\"\\\"/,\\\"reason\\\":\\\"" reason "\\\"/\" test_entries.txt");
              
              # Clear current test
              current_test = "";
            }
          }
          
          END {
            # Output summary of results
            print "Tests completed: " total " total, " passed " passed, " failed " failed";
          }
          ' test_output.txt
          
          # Generate the final JSON file by combining summary and test entries
          awk -v total="$total" -v passed="$passed" -v failed="$failed" '
          BEGIN {
            print "{\"summary\":{\"total\":" total ",\"passed\":" passed ",\"failed\":" failed "},\"tests\":[";
          }
          
          {
            # Remove trailing comma from the last entry
            if(NR == 1) {
              print $0;
            } else {
              line = $0;
              if(NR == FNR) { 
                # If this is the last line, remove trailing comma
                sub(/,$/, "", line);
              }
              print line;
            }
          }
          
          END {
            print "]}";
          }
          ' test_entries.txt > test_results.json
          
          # Count actual test entries
          total=$(grep -c "name" test_entries.txt)
          passed=$(grep -c "\"success\":true" test_entries.txt)
          failed=$(grep -c "\"success\":false" test_entries.txt)
          
          # Fix JSON with correct counts (in case awk didn't get them right)
          sed -i "s/\"total\":[0-9]*/\"total\":$total/" test_results.json
          sed -i "s/\"passed\":[0-9]*/\"passed\":$passed/" test_results.json
          sed -i "s/\"failed\":[0-9]*/\"failed\":$failed/" test_results.json

      - name: Create readable test summary
        if: always()
        run: |
          echo "## Test Results" > test_summary.md
          
          # Use jq to parse the JSON and create a summary
          TOTAL=$(jq '.summary.total' test_results.json)
          PASSED=$(jq '.summary.passed' test_results.json)
          FAILED=$(jq '.summary.failed' test_results.json)
          
          echo "**Summary:** $PASSED/$TOTAL passed, $FAILED failed" >> test_summary.md
          
          echo "### Detailed Results" >> test_summary.md
          echo "| Test | Status | Reason (if failed) |" >> test_summary.md
          echo "|------|--------|---------------------|" >> test_summary.md
          
          jq -r '.tests[] | "| " + .name + " | " + (if .success then "✅ PASS" else "❌ FAIL" end) + " | " + (if .reason then .reason else "" end) + " |"' test_results.json >> test_summary.md
          
          echo "" >> test_summary.md
          echo "### Raw Test Output" >> test_summary.md
          echo '```' >> test_summary.md
          cat full_test_output.txt >> test_summary.md
          echo '```' >> test_summary.md

      - name: Upload test results JSON
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-json
          path: test_results.json

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test_summary.md