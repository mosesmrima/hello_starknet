name: Starknet Foundry Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Run Starknet Foundry Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install asdf plugins
        run: |
          asdf plugin add scarb || echo "scarb plugin already installed"
          asdf plugin add starknet-foundry || echo "starknet-foundry plugin already installed"

      - name: Install Scarb and Starknet Foundry
        run: |
          asdf install scarb latest
          asdf install starknet-foundry latest
          asdf local scarb latest
          asdf local starknet-foundry latest

      - name: Verify installations
        run: |
          scarb --version
          snforge --version

      - name: Run Starknet Foundry tests
        id: test_run
        run: snforge test > test_output.txt 2>&1 || true

        - name: Process test results
        id: process_results
        run: |
          # Store the complete output for reference
          cat test_output.txt > full_test_output.txt
          
          # Extract the summary line showing passed/failed counts
          SUMMARY=$(grep -E "Tests: [0-9]+ passed, [0-9]+ failed" test_output.txt || echo "Tests: 0 passed, 0 failed")
          
          # Extract numbers using basic shell commands
          PASSED=$(echo "$SUMMARY" | grep -oE "[0-9]+ passed" | grep -oE "[0-9]+")
          FAILED=$(echo "$SUMMARY" | grep -oE "[0-9]+ failed" | grep -oE "[0-9]+")
          TOTAL=$((PASSED + FAILED))
          
          # Build a simple JSON with the summary information
          echo "{" > test_results.json
          echo "  \"summary\": {" >> test_results.json
          echo "    \"total\": $TOTAL," >> test_results.json
          echo "    \"passed\": $PASSED," >> test_results.json
          echo "    \"failed\": $FAILED" >> test_results.json
          echo "  }," >> test_results.json
          
          # Get a list of failed tests
          echo "  \"failed_tests\": [" >> test_results.json
          grep "\[FAIL\]" test_output.txt | 
          while read -r fail_line; do
            # Extract test name from [FAIL] line
            TEST_NAME=$(echo "$fail_line" | sed 's/\[FAIL\] \(.*\)/\1/' | sed 's/"/\\"/g')
            # Get the Failure data line immediately following the [FAIL] line
            REASON=$(grep -A1 "$fail_line" test_output.txt | grep "Failure data:" | sed 's/Failure data: \(.*\)/\1/' | sed 's/"/\\"/g')
            # Skip if REASON is empty to avoid malformed JSON
            if [ -n "$REASON" ]; then
              echo "    {\"name\": \"$TEST_NAME\", \"reason\": \"$REASON\"}," >> test_results.json
            fi
          done
          # Remove trailing comma from the last entry if any failed tests exist
          if [ "$FAILED" -gt 0 ]; then
            sed -i '$ s/,$//' test_results.json
          fi
          echo "  ]" >> test_results.json
          echo "}" >> test_results.json
          
          # Set output variables for next steps
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          
          # Determine overall status
          if [ "$FAILED" -eq 0 ]; then
            echo "STATUS=success" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Create test summary
        if: always()
        run: |
          echo "## Test Results" > test_summary.md
          
          if [ "$STATUS" == "success" ]; then
            echo "✅ **All tests passed!** ($PASSED of $TOTAL)" >> test_summary.md
          else
            echo "❌ **Tests failed:** $FAILED failed, $PASSED passed (of $TOTAL total)" >> test_summary.md
            
            echo "" >> test_summary.md
            echo "### Failed Tests" >> test_summary.md
            grep "\[FAIL\]" test_output.txt | 
            while read -r line; do
              TEST_NAME=$(echo "$line" | sed 's/\[FAIL\] \(.*\)/\1/')
              FAILURE_DATA=$(grep -A1 "$line" test_output.txt | grep "Failure data:" | sed 's/Failure data: \(.*\)/\1/')
              echo "- **$TEST_NAME**" >> test_summary.md
              echo "  - Reason: $FAILURE_DATA" >> test_summary.md
            done
          fi
          
          echo "" >> test_summary.md
          echo "### Complete Test Output" >> test_summary.md
          echo '```' >> test_summary.md
          cat test_output.txt >> test_summary.md
          echo '```' >> test_summary.md

      - name: Upload test results JSON
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-json
          path: test_results.json

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test_summary.md