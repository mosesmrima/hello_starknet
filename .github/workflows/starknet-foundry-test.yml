name: Starknet Foundry Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Run Starknet Foundry Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install asdf plugins
        run: |
          asdf plugin add scarb || echo "scarb plugin already installed"
          asdf plugin add starknet-foundry || echo "starknet-foundry plugin already installed"

      - name: Install Scarb and Starknet Foundry
        run: |
          asdf install scarb latest
          asdf install starknet-foundry latest
          asdf local scarb latest
          asdf local starknet-foundry latest

      - name: Verify installations
        run: |
          scarb --version
          snforge --version

      - name: Run Starknet Foundry tests
        id: test_run
        run: snforge test > test_output.txt 2>&1 || true

      - name: Process test results
        id: process_results
        run: |
          # Strip ANSI color codes from test output
          sed 's/\x1B\[[0-9;]*[JKmsu]//g' test_output.txt > cleaned_test_output.txt
          
          # Debug: Print cleaned test output
          echo "Debug: Contents of cleaned_test_output.txt"
          cat cleaned_test_output.txt
          
          # Extract the summary line showing passed/failed counts
          SUMMARY=$(grep -E "Tests: [0-9]+ passed, [0-9]+ failed" cleaned_test_output.txt || echo "Tests: 0 passed, 0 failed")
          echo "Debug: Summary line: $SUMMARY"
          
          # Extract passed and failed counts
          PASSED=$(echo "$SUMMARY" | grep -oE "[0-9]+ passed" | grep -oE "[0-9]+" || echo "0")
          FAILED=$(echo "$SUMMARY" | grep -oE "[0-9]+ failed" | grep -oE "[0-9]+" || echo "0")
          TOTAL=$((PASSED + FAILED))
          echo "Debug: Passed: $PASSED, Failed: $FAILED, Total: $TOTAL"
          
          # Initialize JSON output
          echo "{" > test_results.json
          echo "  \"summary\": {" >> test_results.json
          echo "    \"total\": $TOTAL," >> test_results.json
          echo "    \"passed\": $PASSED," >> test_results.json
          echo "    \"failed\": $FAILED" >> test_results.json
          echo "  }," >> test_results.json
          echo "  \"failed_tests\": [" >> test_results.json
          
          # Process failed tests using a loop to read the file line by line
          FAIL_FOUND=false
          TEST_NAME=""
          while IFS= read -r line; do
            if echo "$line" | grep -q "\[FAIL\]"; then
              TEST_NAME=$(echo "$line" | sed 's/\[FAIL\] \(.*\)/\1/' | sed 's/"/\\"/g' | sed "s/'/\\'/g")
              FAIL_FOUND=true
              echo "Debug: Found failed test: name='$TEST_NAME'"
            elif [ "$FAIL_FOUND" = true ] && echo "$line" | grep -q "Failure data:"; then
              REASON=$(echo "$line" | sed 's/Failure data: \(.*\)/\1/' | sed 's/"/\\"/g' | sed "s/'/\\'/g")
              echo "Debug: Found reason: reason='$REASON'"
              if [ -n "$TEST_NAME" ] && [ -n "$REASON" ]; then
                echo "    {\"name\": \"$TEST_NAME\", \"reason\": \"$REASON\"}," >> test_results.json
              else
                echo "Debug: Skipping test due to empty name or reason"
              fi
              FAIL_FOUND=false
              TEST_NAME=""
            fi
          done < cleaned_test_output.txt
          
          # Remove trailing comma if failed tests exist
          if [ "$FAILED" -gt 0 ] && grep -q "name" test_results.json; then
            sed -i '/"failed_tests": \[/!b;:a;/\]/!{N;ba};s/,\n\s*\]/\n  \]/' test_results.json
          fi
          
          # Close JSON
          echo "  ]" >> test_results.json
          echo "}" >> test_results.json
          
          # Debug: Print final JSON
          echo "Debug: Contents of test_results.json"
          cat test_results.json
          
          # Set output variables
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          
          # Determine overall status
          if [ "$FAILED" -eq 0 ]; then
            echo "STATUS=success" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Create test summary
        if: always()
        run: |
          # Use cleaned test output
          echo "## Test Results" > test_summary.md
          
          if [ "$STATUS" == "success" ]; then
            echo "✅ **All tests passed!** ($PASSED of $TOTAL)" >> test_summary.md
          else
            echo "❌ **Tests failed:** $FAILED failed, $PASSED passed (of $TOTAL total)" >> test_summary.md
            
            echo "" >> test_summary.md
            echo "### Failed Tests" >> test_summary.md
            FAIL_FOUND=false
            TEST_NAME=""
            while IFS= read -r line; do
              if echo "$line" | grep -q "\[FAIL\]"; then
                TEST_NAME=$(echo "$line" | sed 's/\[FAIL\] \(.*\)/\1/')
                FAIL_FOUND=true
                echo "Debug: Found failed test for summary: name='$TEST_NAME'"
              elif [ "$FAIL_FOUND" = true ] && echo "$line" | grep -q "Failure data:"; then
                FAILURE_DATA=$(echo "$line" | sed 's/Failure data: \(.*\)/\1/')
                echo "Debug: Found failure data for summary: reason='$FAILURE_DATA'"
                echo "- **$TEST_NAME**" >> test_summary.md
                echo "  - Reason: $FAILURE_DATA" >> test_summary.md
                FAIL_FOUND=false
                TEST_NAME=""
              fi
            done < cleaned_test_output.txt
          fi
          
          echo "" >> test_summary.md
          echo "### Complete Test Output" >> test_summary.md
          echo '```' >> test_summary.md
          cat cleaned_test_output.txt >> test_summary.md
          echo '```' >> test_summary.md
          
          # Debug: Print test summary
          echo "Debug: Contents of test_summary.md"
          cat test_summary.md

      - name: Upload test results JSON
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-json
          path: test_results.json

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test_summary.md
